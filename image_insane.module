<?php

/**
 * @file
 * Allows editors to easily change images on site.
 */

function image_insane_init(){

  drupal_add_js(drupal_get_path('module', 'image_insane') . '/js/image_insane.js');

  drupal_add_js(array(
    'image_insane' => array(
      'post_url' => '/image_insane_file_upload',
    ),
  ),
  'setting');

}

/**
 * Implements hook_menu().
 */
function image_insane_menu(){

  $items['image_insane_file_upload'] = array(
    'title' => t('AJAX callback/listener for file uploads'),
    'page callback' => '_image_insane_upload_callback',
    'access arguments' => array('image insane'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function image_insane_permission() {
  return array(
    'image insane' => array(
      'title' => t('Allow image drag & drop replacement'),
      'description' => t(''),
    ),
  );
}


function _image_insane_upload_callback(){

  if(array_key_exists('json', $_POST)){
    $json_data = json_decode($_POST['json']);

    //  NODE variables
    $operation = $json_data->operation;
    $entity_id = $json_data->entity_id;
    $entity_type = $json_data->entity_type;
    $image_style = $json_data->image_style;
    $image_delta = $json_data->image_delta;
    $image_field_name = $json_data->image_field_name;

    switch($operation){
      case 'preview':
        //  File/image properties
        $base64_data = $json_data->base64;
        list($type, $base64_data) = explode(';', $base64_data);
        list(, $base64_data) = explode(',', $base64_data);
        $base64_data = base64_decode($base64_data);

        $file = file_save_data($base64_data, 'public://'.$json_data->name);
        $file->status = FILE_STATUS_TEMPORARY;
        file_save($file);

        $return_array = json_encode(
          array(
            'image_url' => image_style_url($image_style, $file->uri),
            'fid' => $file->fid,
          )
        );

        print $return_array;
        break;
      case 'save':
        $fid = $json_data->fid;
        //  Load file based on File ID
        $file = file_load($fid);

        //  Load entity
        $entity = entity_load($entity_type, array($entity_id));
        $entity = reset($entity);

        global $language;
        $field_info = field_info_field($image_field_name);
        $langcode = $field_info['translatable'] ? $language->language : LANGUAGE_NONE;

        //  Delete olf file and it's db record
        $old_items = field_get_items($entity_type, $entity, $image_field_name);
        $old_file = $old_items[$image_delta];

        // new file
        $entity->field_image[$langcode][$image_delta] = array(
         'fid' => $file->fid,
         'uri' => $file->uri,
         'filename' => $file->filename,
         'filemime' => $file->filemime,
         'uid' => $file->uid,
         'status' => $file->status,
         'timestamp' => $file->timestamp,
         'filesize' => $file->filesize,
        );
        field_attach_update($entity_type, $entity);

        //  Delete old file entries
        $old_file = (object) $old_file;
        file_delete($old_file);

        print 'save_success';

        break;
    }

  }

  return NULL;
}


/**
* Implements hook_field_attach_view_alter().
*/
function image_insane_field_attach_view_alter(&$output, $context) {

  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'image') {
      if (!empty($element['#items'])) {
        $entity_type = $element['#entity_type'];
        $entity = $element['#object'];
        if (user_access('image insane') && entity_access('update', $entity_type, $entity)) {
          $wrapper = entity_metadata_wrapper($entity_type, $entity);
          $entity_id = $wrapper->getIdentifier();
          foreach ($element['#items'] as $delta => $item) {
            $element[$delta]['#item']['attributes'] = array(
              'class' => 'image-insane-item',
              'data-entity-id' => $entity_id,
              'data-entity-type' => $entity_type,
              'data-image-field-name' => $field_name,
              'data-image-style' => $element[$delta]['#image_style'],
              'data-image-delta' => $delta,
              'data-image-original' => image_style_url($element[$delta]['#image_style'], $item['uri']),
            );
          }
        }
      }
    }
  }
}

